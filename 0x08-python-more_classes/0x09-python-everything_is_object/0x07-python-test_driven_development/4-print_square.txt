# 4-print_square.txt

============================
Testing the module 4-print_square.py
------------------------------

It defines a square-printing function with prototype ``print_square(size)``.

Usage
------

The Squares should beprinted using the ``#`` symbol. The parameter ``size``
represents the height and width of the square.

::
importing the function and print the first square with value 1 as size

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If value of ``size`` is 0, the function prints nothing.

::

    >>> print_square(0)

Testing cases with Invalid Sizes
================================

Value passed to ``size`` must be an integer. Otherwise, a TypeError is raised.

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer



    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer



    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

ValueError is raised if``size`` is less than zero

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note that type-checking occurs before value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

At least one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
