#2-matrix_divided.txt

==================
2-matrix_divided module defines a matrix division function ``matrix_divided(matrix, div)``

The function returns a new matrix with all elements divided by ``div``

     >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
     
     ::

     The matrix initialization
     >>> matrix = [
	     [1, 2, 3],
	     [4, 5, 6]
     ]

     Note that quotient are rounded to a maximum of 2 decimal places
     >>> print(matrix_divided(matrix, 3)))
     [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
     >>> matrix
     [[1, 2, 3], [4, 5, 6]]

     ::

     The original matrix is left unchanged
     >>> print(matrix)
     [[1, 2, 3], [4, 5, 6]]

     The function should be able to handle floating point numbers
     ::

     >>> matrix = [
             [1.1, -2.2, 3.3],
             [4.4, 5.5, -6.6]
     ]
     >>> print(matrix_divided(matrix, 3))
     [[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

     Integers can be combined with floats.

     ::

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

    Invalid Matrices
    ===============

    The parameter ``matrix`` must be a list of lists consisting of either ints or floats and if ``matrix`` is not a list, TypeError should be raised

    ::

    >>> matrix = "This is not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


    ::
    
    An empty llist should raise an error  but an empty list of lists  succeeds


    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

	
    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

    A TypeError if a ``matrix`` not a list of lists
    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    ::


    TypeError raised of elements in a matrix not an int or a float
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

	All the rows in ``matrix`` must be the same size else a TypeError raised if any rows are of different sizes

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
